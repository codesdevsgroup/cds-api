generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Configurações do Sistema
model Config {
  id           Int     @id @default(autoincrement())
  name         String  @db.VarChar(120)
  email        String  @db.VarChar(120)
  mobile       String  @db.VarChar(20)
  phone1       String? @db.VarChar(20)
  phone2       String? @db.VarChar(20)
  place        String  @db.VarChar(150)
  number       String  @db.VarChar(10)
  complement   String? @db.VarChar(50)
  neighborhood String  @db.VarChar(120)
  city         String  @db.VarChar(60)
  state        String  @db.VarChar(2)
  zipCode      String  @db.VarChar(10)

  @@map("config")
}

// Modelo de Usuário para Autenticação
model User {
  id            String       @id @default(cuid())
  email         String       @unique @db.VarChar(80)
  username      String       @unique @db.VarChar(255)
  cpfCnpj       String?      @db.VarChar(14)
  password      String       @db.VarChar(255)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
  isDeleted     Boolean      @default(false)
  isActive      Boolean      @default(false)
  activatedAt   DateTime?
  termsIp       String?      @db.VarChar(45)
  termsAccepted Boolean      @default(false)
  role          Role         @default(CLIENT)
  personId      Int?         @unique
  teamMembersId Int?         @unique
  tokenVersion  Int          @default(0)
  person        Person?      @relation(fields: [personId], references: [id])
  teamMembers   TeamMembers? @relation(fields: [teamMembersId], references: [id])
  scheduler     Scheduler[]

  @@map("user")
}

// Modelo de Membros da Equipe (Funcionários)
model TeamMembers {
  id              Int                    @id @default(autoincrement())
  name            String                 @db.VarChar(255)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @default(now())
  deletedAt       DateTime?
  isDeleted       Boolean                @default(false)
  workStartTime   DateTime
  workEndTime     DateTime
  discountLimit   Float                  @default(0)
  commissionRate  Float                  @default(0)
  position        String                 @db.VarChar(100)
  hireDate        DateTime
  salary          Float
  users           User[]
  departments     TeamMemberDepartment[]
  wpHelp          WpHelp[]
  WpInvitedMember WpInvitedMember[]
  os              OS[]
  osHelpers       OSHelper[]

  @@map("team_members")
}

// Modelo de Departamentos da Empresa (Equipe) para os Funcionários
model Department {
  id          Int                    @id @default(autoincrement())
  name        String                 @db.VarChar(100)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  deletedAt   DateTime?
  isDeleted   Boolean                @default(false)
  teamMembers TeamMemberDepartment[]
  wpHelp      WpHelp[]

  @@map("departments")
}

// Modelo de Relacionamento entre Membros da Equipe e Departamentos
model TeamMemberDepartment {
  teamMemberId Int
  departmentId Int
  teamMember   TeamMembers @relation(fields: [teamMemberId], references: [id])
  department   Department  @relation(fields: [departmentId], references: [id])

  @@id([teamMemberId, departmentId])
  @@map("team_member_department")
}

// Modelo de Pessoas (Clientes e Funcionários) da Empresa com Dados Pessoais e de Contato
model Person {
  id                 Int               @id @default(autoincrement())
  name               String            @db.VarChar(255)
  fantasyName        String?           @db.VarChar(255)
  cpfCnpj            String?           @db.VarChar(11)
  email              String            @unique @db.VarChar(80)
  phone1             String?           @db.VarChar(20)
  phone2             String?           @db.VarChar(20)
  birthDate          DateTime?
  notes              String?
  defaulter          Boolean           @default(false)
  photo              String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  deletedAt          DateTime?
  isDeleted          Boolean           @default(false)
  user               User?             @relation
  addressId          Int?              @unique
  address            Address?          @relation(fields: [addressId], references: [id])
  schedulers         Scheduler[]       @relation("SchedulerPerson")
  responseSchedulers Scheduler[]       @relation("SchedulerResponsePerson")
  os                 OS[]
  corporateClient    CorporateClient[]
  wpNumbers          WpNumber[]

  @@map("person")
}

// Modelo de Endereços para Pessoas (Clientes e Funcionários)
model Address {
  id           Int              @id @default(autoincrement())
  street       String           @db.VarChar(255)
  number       String           @db.VarChar(10)
  neighborhood String           @db.VarChar(255)
  city         String           @db.VarChar(255)
  state        String           @db.VarChar(2)
  zipCode      String           @db.VarChar(10)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  deletedAt    DateTime?
  isDeleted    Boolean          @default(false)
  person       Person?
  corporate    CorporateClient?

  @@map("address")
}

enum Role {
  CLIENT
  ADMIN
  SUPERVISOR
  STAFF
  FINANCIAL
  SOCIALMEDIA
  CODESDEVS
}

// Modelo Agendamento
model Scheduler {
  id               Int       @id @default(autoincrement())
  personId         Int
  userId           String // Usuário que fez o Agendamento
  teamMemberId     Int // Membro da equipe que fará o atendimento
  processId        Int
  returnDay        DateTime?
  price            Float
  notation         String?   @db.VarChar(255)
  start            DateTime
  end              DateTime
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?
  isDeleted        Boolean   @default(false)
  person           Person    @relation("SchedulerPerson", fields: [personId], references: [id])
  user             User      @relation(fields: [userId], references: [id])
  responsePersonId Int?
  personResponse   Person?   @relation("SchedulerResponsePerson", fields: [responsePersonId], references: [id])
  process          Processes @relation(fields: [processId], references: [id])

  @@map("scheduler")
}

// Modelo de Procedimento
model Processes {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(255)
  description   String?     @db.VarChar(255)
  price         Float       @default(0)
  returInterval Int         @default(0)
  duration      Int         @default(30)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?
  isDeleted     Boolean     @default(false)
  scheduler     Scheduler[]

  @@map("processes")
}

// Modelo de Ordem de Serviço (OS)
model OS {
  id           Int         @id @default(autoincrement())
  description  String      @db.VarChar(255)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?
  isDeleted    Boolean     @default(false)
  personId     Int
  teamMemberId Int
  person       Person      @relation(fields: [personId], references: [id])
  wpMessages   WpMessage[]
  teamMember   TeamMembers @relation(fields: [teamMemberId], references: [id])
  osHelpers    OSHelper[] // Relação muitos-para-muitos com TeamMembers através de OSHelper
  wpHelp       WpHelp[]

  @@map("os")
}

// Tabela intermediária para a relação muitos-para-muitos entre OS e TeamMembers
model OSHelper {
  osId         Int
  teamMemberId Int
  os           OS          @relation(fields: [osId], references: [id])
  teamMember   TeamMembers @relation(fields: [teamMemberId], references: [id])

  @@id([osId, teamMemberId])
  @@map("os_helper")
}

// Modelo para o cliente final (CorporateClient)
model CorporateClient {
  id          Int                       @id @default(autoincrement())
  personId    Int
  name        String                    @db.VarChar(80)
  fantasyName String?                   @db.VarChar(80)
  cpfCnpj     String?                   @db.VarChar(14)
  email       String                    @unique @db.VarChar(80)
  phone1      String?                   @db.VarChar(20)
  phone2      String?                   @db.VarChar(20)
  notes       String?
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
  deletedAt   DateTime?
  isDeleted   Boolean                   @default(false)
  addressId   Int?                      @unique
  address     Address?                  @relation(fields: [addressId], references: [id])
  person      Person                    @relation(fields: [personId], references: [id])
  wpNumbers   CorporateClientWpNumber[] // Relação muitos-para-muitos com WpNumber

  @@map("corporate_client")
}

/// --------- TABELAS DESTINADAS AO BOT DE WHATSAPP ----------------

// Modelo de Sessões do WhatsApp
model WpSession {
  number          String            @id // Número do WhatsApp (ID único da sessão)
  name            String // Nome da sessão
  status          WpSessionStatus // Status da sessão (e.g., "PENDING", "CONNECTED", "DISCONNECTED")
  qrCode          String? // QR code gerado para login (se aplicável)
  sessionData     Json? // Dados persistentes da sessão (como tokens ou credenciais serializadas)
  createdAt       DateTime          @default(now()) // Timestamp de criação
  updatedAt       DateTime          @updatedAt // Atualizado automaticamente quando modificado
  createdBy       Int? // ID do usuário que criou o registro
  updatedBy       Int? // ID do usuário que atualizou o registro
  wpHelp          WpHelp[] // Atendimentos associados
  WpMessage       WpMessage[]
  WpInvitedMember WpInvitedMember[]
  WpNumberSession WpNumberSession[]

  @@map("wp_session")
}

enum WpSessionStatus {
  PENDING
  CONNECTED
  DISCONNECTED
}

// Grava detalhes de cada chamado
model WpHelp {
  id                Int               @id @default(autoincrement())
  wpNumberId        Int // ID do número de WhatsApp sendo atendido
  wpSessionNumber   String // Número do WhatsApp associado
  startTime         DateTime          @default(now()) // Hora de início
  endTime           DateTime? // Hora de término
  handledByMemberId Int? // ID do membro da equipe responsável
  teamMember        TeamMembers?      @relation(fields: [handledByMemberId], references: [id])
  wpNumber          WpNumber          @relation(fields: [wpNumberId], references: [id])
  wpMessages        WpMessage[] // Mensagens trocadas entre o bot e o cliente
  invitedMembers    WpInvitedMember[] // Membros convidados para o atendimento
  isClosed          Boolean           @default(false) // Se o atendimento foi encerrado
  osId              Int? // ID da Ordem de Serviço associada
  os                OS?               @relation(fields: [osId], references: [id])
  isBotHandling     Boolean           @default(false) // Se o bot está atendendo
  isInQueue         Boolean           @default(false) // Se o atendimento está na fila de espera
  departmentId      Int? // ID do departamento na fila de espera
  department        Department?       @relation(fields: [departmentId], references: [id])
  wpSession         WpSession         @relation(fields: [wpSessionNumber], references: [number])

  @@map("wp_help")
}

// Armazena as mensagens trocadas entre o bot e o cliente
model WpMessage {
  id              Int                @id @default(autoincrement())
  messageId       String             @unique
  timestamp       DateTime           @default(now())
  content         String             @db.Text
  osId            Int?
  os              OS?                @relation(fields: [osId], references: [id], onDelete: Cascade)
  wpHelpId        Int?
  wpHelp          WpHelp?            @relation(fields: [wpHelpId], references: [id])
  wpSessionNumber String
  wpSession       WpSession          @relation(fields: [wpSessionNumber], references: [number])
  readStatus      Boolean            @default(false) // Status de leitura da mensagem
  responseTime    Int? // Tempo de resposta (em segundos)
  status          WpMessageStatus // Status da mensagem: enviada, entregue, lida, etc.
  direction       WpMessageDirection // Direção: enviada ou recebida
  isAutomated     Boolean            @default(false) // Se foi gerada automaticamente pelo bot
  wpNumberId      Int? // ID do número de WhatsApp associado
  wpNumber        WpNumber?          @relation(fields: [wpNumberId], references: [id])

  @@map("whatsapp_message")
}

enum WpMessageStatus {
  SENT // A mensagem foi enviada do cliente, mas ainda não foi entregue ao destinatário.
  DELIVERED // A mensagem foi entregue ao destinatário com sucesso.
  READ // O destinatário leu a mensagem (exibido como "check duplo azul").
  PENDING // A mensagem ainda não foi enviada ou entregue, aguardando processamento.
  FAILED // A mensagem falhou ao ser enviada ou entregue devido a algum erro (ex: falha de conexão).
}

enum WpMessageDirection {
  SENT
  RECEIVED
}

// Lista de membros convidados para atendimento
model WpInvitedMember {
  whatsappInstanceNumber String
  teamMemberId           Int
  teamMember             TeamMembers @relation(fields: [teamMemberId], references: [id])
  wpHelpId               Int?
  wpHelp                 WpHelp?     @relation(fields: [wpHelpId], references: [id])
  wpSession              WpSession   @relation(fields: [whatsappInstanceNumber], references: [number])

  @@id([whatsappInstanceNumber, teamMemberId]) // Chave composta
  @@map("invited_member")
}

// Tabela intermediária para salvar clientes que chamaram no WhatsApp ou grava número de quem iniciamos um chamado
model WpNumber {
  id               Int                       @id @default(autoincrement())
  number           String                    @unique // Add @unique to allow unique queries
  personId         Int?
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  person           Person?                   @relation(fields: [personId], references: [id])
  WpHelp           WpHelp[]
  wpSessions       WpNumberSession[]
  corporateClients CorporateClientWpNumber[]
  wpMessages       WpMessage[]

  @@map("wp_number")
}

// Tabela intermediária para a relação muitos-para-muitos entre WpNumber e WpSession
model WpNumberSession {
  wpNumberId      Int
  wpSessionNumber String
  wpNumber        WpNumber  @relation(fields: [wpNumberId], references: [id])
  wpSession       WpSession @relation(fields: [wpSessionNumber], references: [number])
  createdBy       Int? // ID do usuário que criou o registro
  updatedBy       Int? // ID do usuário que atualizou o registro

  @@id([wpNumberId, wpSessionNumber]) // Chave composta
  @@map("wp_number_session")
}

// Tabela intermediária para a relação muitos-para-muitos entre WpNumber e CorporateClient
model CorporateClientWpNumber {
  corporateClientId Int
  wpNumberId        Int
  corporateClient   CorporateClient @relation(fields: [corporateClientId], references: [id])
  wpNumber          WpNumber        @relation(fields: [wpNumberId], references: [id])

  @@id([corporateClientId, wpNumberId]) // Chave composta para garantir a relação muitos-para-muitos
  @@map("corporate_client_wp_number")
}
