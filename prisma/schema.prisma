generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Configurações do Sistema
model Config {
  id           Int     @id @default(autoincrement())
  name         String  @db.VarChar(120)
  email        String  @db.VarChar(120)
  mobile       String  @db.VarChar(20)
  phone1       String? @db.VarChar(20)
  phone2       String? @db.VarChar(20)
  place        String  @db.VarChar(150)
  number       String  @db.VarChar(10)
  complement   String? @db.VarChar(50)
  neighborhood String  @db.VarChar(120)
  city         String  @db.VarChar(60)
  state        String  @db.VarChar(2)
  zipCode      String  @db.VarChar(10)

  @@map("config")
}

// Modelo de Usuário para Autenticação
model User {
  id            String       @id @default(cuid())
  email         String       @unique @db.VarChar(80)
  username      String       @unique @db.VarChar(255)
  cpfCnpj       String?      @db.VarChar(14)
  password      String       @db.VarChar(255)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
  isDeleted     Boolean      @default(false)
  isActive      Boolean      @default(false)
  activatedAt   DateTime?
  termsIp       String?      @db.VarChar(45)
  termsAccepted Boolean      @default(false)
  role          Role         @default(CLIENT)
  personId      Int?         @unique
  teamMembersId Int?         @unique
  tokenVersion  Int          @default(0)
  person        Person?      @relation(fields: [personId], references: [id])
  teamMembers   TeamMembers? @relation(fields: [teamMembersId], references: [id])
  scheduler     Scheduler[]

  @@map("user")
}

// Modelo de Membros da Equipe (Funcionários)
model TeamMembers {
  id             Int                    @id @default(autoincrement())
  name           String                 @db.VarChar(255)
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  deletedAt      DateTime?
  isDeleted      Boolean                @default(false)
  workStartTime  DateTime
  workEndTime    DateTime
  discountLimit  Float                  @default(0)
  commissionRate Float                  @default(0)
  position       String                 @db.VarChar(100)
  hireDate       DateTime
  salary         Float
  users          User[]
  departments    TeamMemberDepartment[]

  @@map("team_members")
}

// Modelo de Departamentos da Empresa (Equipe) para os Funcionários
model Department {
  id          Int                    @id @default(autoincrement())
  name        String                 @db.VarChar(100)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  deletedAt   DateTime?
  isDeleted   Boolean                @default(false)
  teamMembers TeamMemberDepartment[]

  @@map("departments")
}

// Modelo de Relacionamento entre Membros da Equipe e Departamentos
model TeamMemberDepartment {
  teamMemberId Int
  departmentId Int
  teamMember   TeamMembers @relation(fields: [teamMemberId], references: [id])
  department   Department  @relation(fields: [departmentId], references: [id])

  @@id([teamMemberId, departmentId])
  @@map("team_member_department")
}

// Modelo de Pessoas (Clientes e Funcionários) da Empresa com Dados Pessoais e de Contato
model Person {
  id                 Int         @id @default(autoincrement())
  name               String      @db.VarChar(255)
  fantasyName        String?     @db.VarChar(255)
  cpfCnpj            String?     @db.VarChar(11)
  email              String      @unique @db.VarChar(80)
  phone1             String?     @db.VarChar(20)
  phone2             String?     @db.VarChar(20)
  birthDate          DateTime?
  notes              String?
  defaulter          Boolean     @default(false)
  photo              String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  deletedAt          DateTime?
  isDeleted          Boolean     @default(false)
  user               User?       @relation
  addressId          Int?        @unique
  address            Address?    @relation(fields: [addressId], references: [id])
  schedulers         Scheduler[] @relation("SchedulerPerson")
  responseSchedulers Scheduler[] @relation("SchedulerResponsePerson")

  @@map("person")
}

// Modelo de Endereços para Pessoas (Clientes e Funcionários)
model Address {
  id           Int       @id @default(autoincrement())
  street       String    @db.VarChar(255)
  number       String    @db.VarChar(10)
  neighborhood String    @db.VarChar(255)
  city         String    @db.VarChar(255)
  state        String    @db.VarChar(2)
  zipCode      String    @db.VarChar(10)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  isDeleted    Boolean   @default(false)
  person       Person?
  client       Client?

  @@map("address")
}

enum Role {
  CLIENT
  ADMIN
  SUPERVISOR
  STAFF
  FINANCIAL
  SOCIALMEDIA
  CODESDEVS
}

model Client {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(80)
  fantasyName String?   @db.VarChar(80)
  cpfCnpj     String?   @db.VarChar(14)
  email       String    @unique @db.VarChar(80)
  phone1      String?   @db.VarChar(20)
  phone2      String?   @db.VarChar(20)
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  isDeleted   Boolean   @default(false)
  addressId   Int?      @unique
  address     Address?  @relation(fields: [addressId], references: [id])

  @@map("client")
}

// Modelo Agendamento
model Scheduler {
  id               Int       @id @default(autoincrement())
  personId         Int
  userId           String // Usuário que fez o Agendamento
  responsePersonId Int? // Usuário que fará o Procedimento
  processId        Int
  returnDay        DateTime?
  price            Float
  notation         String?   @db.VarChar(255)
  start            DateTime
  end              DateTime
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?
  isDeleted        Boolean   @default(false)
  person           Person    @relation("SchedulerPerson", fields: [personId], references: [id])
  user             User      @relation(fields: [userId], references: [id])
  personResponse   Person?   @relation("SchedulerResponsePerson", fields: [responsePersonId], references: [id])
  process          Processes @relation(fields: [processId], references: [id])

  @@map("scheduler")
}

// Modelo de Procedimento
model Processes {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(255)
  description   String?     @db.VarChar(255)
  price         Float       @default(0)
  returInterval Int         @default(0)
  duration      Int         @default(30)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?
  isDeleted     Boolean     @default(false)
  scheduler     Scheduler[]

  @@map("processes")
}
